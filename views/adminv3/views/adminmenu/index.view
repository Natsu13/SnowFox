<div class="row">
    <div class="col-md-12">
        <div class="mb-2">
            <span class="oneline mr-2" id="language-selector">
                <a href="#" class="button toggle" data-lang="null">{t("Default")}</a>
                {for $model["languages"] as $key => $lang}
                    <a href="#" class="button" data-lang="{$lang}">{t($lang)}</a>
                {/for}
            </span>
            <a href="#" class="button disabled" id="menu-new"><span class="material-symbols-outlined">add</span> {t("New item")}</a>
        </div>
        <div class="card" id="menu-selector">
            <div class="pill-select">
                {for $model["menus"] as $key => $menu}
                    <a href="#" data-id="{$key}">{$key}</a>
                {/for}
            </div>
        </div>
        <div class="card no-card-margin-next">
            <div class="flex" id="menu-containers">
                <div>
                    <div class="menu-box menu-box-static-text" data-id="0">
                        <div class="text">{t("Drop menu from top to this box")}</div>
                    </div>
                </div>
                <div>
                    <div class="menu-box menu-box-static-text" data-id="1">
                        <div class="text">{t("Drop menu from top to this box")}</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    var notupdate = false;

    function resizeMenuContainer(){
        var divs = $("#menu-containers > div");
        divs.css("height", "0px");
        var height = $(".admin-content").outerHeight() - $(".page-title").outerHeight() - 
            $("#menu-selector").outerHeight() - $("#language-selector").outerHeight() - 50;
        divs.css("height", height);
    }
    resizeMenuContainer();
    $(window).on("resize", function(){ resizeMenuContainer(); });

    $(function(){
        $("#menu-new").on("click", function(){
            if($(this).hasClass("disabled")) return;

            menuManager.addItem();
        });
    });

    var MenuManager = function(){
        this.state = "NONE";
        this.firstBoxId = null;

        var self = this;
        $(window).on("mousemove touchmove", function(event){
            self.HandleMouse("move", event);
        });
        $(window).on("mouseup touchend", function(event){
            self.HandleMouse("stop", event);
        });

        this.boxes = $("#menu-containers .menu-box");

        this.selected = { copy: null, element: null };  

        this.prepare();
        this.loadSettings();
    };
    MenuManager.prototype.addItem = function(){
        if(this.firstBoxId == null) return;
        var language = $("#language-selector a.toggle").data("lang");

        manager.get("{~/adminv3/menu/add/}", { box: this.firstBoxId, language: language }, function (data) {
            menuManager.reloadMenus();
            menuManager.editItem(data.id);
        });
    }
    MenuManager.prototype.loadSettings = function(){
        var boxes = this.boxes.length;
        var settings = this.getMenuSettings();

        console.log(settings);

        this.boxes.each(function(){
            $(this).data("selected-id", settings.menu["pos_" + $(this).data("id")]);
        });

        //this.refreshSelected();
        this.reloadMenus();
    };
    MenuManager.prototype.getMenuSettings = function(){
        var settings = manager.getConfig();
        if(typeof settings.menu == "undefined") settings.menu = {};
        return settings;
    }
    MenuManager.prototype.saveBoxSettings = function(id, box) {
        //this.settings.menu["pos_" + id] = box;
        var config = this.getMenuSettings();
        config.menu["pos_" + id] = box;
        manager.saveConfig(config);
    };
    MenuManager.prototype.prepare = function(){
        $("#language-selector a").data("menu", this).on("click", function(e){
            e.preventDefault();
            $("#language-selector a").removeClass("toggle");
            $(this).addClass("toggle");
            $(this).data("menu").reloadMenus();
        });        

        $("#menu-selector a").data("menu", this);
        $("#menu-selector a").each(function(){
            $(this).on("mousedown touchstart", function(e){
                e.preventDefault();

                if($(this).hasClass("selected") || e.button != 0) return;

                var menu = $(this).data("menu");
                var copy = $(this).clone();
                $("body").append(copy);
                copy.addClass("menu-moving")
                menu.selected.copy = copy;
                menu.selected.copy.data("id", $(this).text());
                menu.selected.element = $(this);
                menu.selected.element.css("opacity", 0.5);
                menu.state = "MOVING";
                copy.show();
                menu.HandleMouse("move", e);
            });
        });
    };
    MenuManager.prototype.refreshSelected = function(){
        $("#menu-selector a").removeClass("selected");
        $("#menu-new").addClass("disabled");

        var self = this;
        self.firstBoxId = null;
        var index = 0;
        this.boxes.each(function(){
            index++;
            if($(this).data("selected-id") == undefined || $(this).data("selected-id") == "") return;

            $("#menu-selector a[data-id=\""+$(this).data("selected-id")+"\"]").addClass("selected");
            if(index == 1) {
                $("#menu-new").removeClass("disabled");
                self.firstBoxId = $(this).data("selected-id");
            }
        });
    };
    MenuManager.prototype.reloadMenus = function(){
        var self = this;
        this.boxes.each(function(){
            if($(this).data("selected-id") != undefined) {
                self.loadMenu(
                    { element: $(this), left: $(this).offset().left, top: $(this).offset().top, width: $(this).outerWidth(), height: $(this).outerHeight() },
                    $(this).data("selected-id")
                );
            }
        });
    };
    MenuManager.prototype.loadMenu = function(selectedBox, box) {
        var selectedBox = selectedBox;
        var box = box;

        var language = $("#language-selector a.toggle").data("lang");
        var self = this;                
        manager.get("{~/adminv3/menu/menu/}"+box, { language: language }, function (data) {
            selectedBox.element.removeClass("menu-box-static-text").html(data.content);
            selectedBox.element.data("selected-id", box);

            self.saveBoxSettings(selectedBox.element.data("id"), box);

            self.refreshSelected();

            if(self.selected != undefined && self.selected.copy != undefined) {
                self.selected.copy.animate({ top: selectedBox.top, left: selectedBox.left, width: selectedBox.width, height: selectedBox.height, opacity: 0 }, 200, function(){
                    $(this).remove();
                });
            }
        });
    }
    MenuManager.prototype.HandleMouse = function(type, event){
        var positions = [];
        this.boxes.each(function(){
            positions.push({ element: $(this), left: $(this).offset().left, top: $(this).offset().top, width: $(this).outerWidth(), height: $(this).outerHeight() });
        });
        this.boxes.removeClass("selected");

        var position = getPositionFromEvent(event);
        var selectedBox = null;

        for(var key in positions) {
            var pos = positions[key];

            if(position.x > pos.left && position.y > pos.top && position.x < pos.left + pos.width && position.y < pos.top + pos.height) {
                selectedBox = pos;
            }
        }

        if(type == "stop" && this.state == "MOVING") {
            this.state = "END";
            var el = this.selected.element;

            if(selectedBox == null) {
                this.selected.copy.animate({ top: el.offset().top, left: el.offset().left, opacity: 0 }, 200, function(){
                    $(this).remove();
                });
            }else{
                 this.loadMenu(selectedBox, this.selected.copy.data("id"));
            }

            this.selected.element.css("opacity", 1);
        }
        else if(type == "move" && this.state == "MOVING") {            
            var dim = { width: this.selected.copy.outerWidth(), height: this.selected.copy.outerHeight() };
            this.selected.copy.css({ left: position.x - dim.width / 2, top: position.y - dim.height / 2 });

            if(selectedBox != null) {
                selectedBox.element.addClass("selected");
            }
        }
    };
    MenuManager.prototype.visibleItem = function(box, index) {
        var main = $("#list-item-" + box+"-" + index);
        var item_id = $("#list-item-" + box+"-" + index+" .item-id").val();
        var is_visible = !main.hasClass("not-active");
        manager.get("{~/adminv3/menu/visibility_change/}" + item_id, { }, function (data) {
            main.toggleClass("not-active");
            manager.notification("{t('Saved')}", "success");
        });
    };
    MenuManager.prototype.copyItem = function(box, index){
        var main = $("#select-items-" + box);
        var item_id = $("#list-item-" + box+"-" + index+" .item-id").val();
        var sort = $.map(main.find(".sort-list-item"), function(e,i){ return $(e).find(".item-id").val(); });  
        var self = this;

        manager.get("{~/adminv3/menu/item_copy/}" + item_id, { sort: sort }, function (data) {
            self.reloadMenus();
            manager.notification("{t('Saved')}", "success");
        });
    };
    MenuManager.prototype.removeItem = function(box, index) {
        var item = $("#list-item-" + box+"-" + index);
        var item_id = $("#list-item-" + box+"-" + index+" .item-id").val();

        confirmBox("{t('Remove')}", "{t('Are you sure you want to delete this item?')}", function(){
            manager.get("{~/adminv3/menu/item_remove/}" + item_id, { }, function (data) {
                item.animate({ opacity: 0 }, 300, function(){
                    $(this).remove();
                });
                manager.notification("{t('Removed')}", "success");
            });
        }, function(){});
    };
    MenuManager.prototype.editItem = function(box, index){
        var item = $("#list-item-" + box+"-" + index);
        var item_id = $("#list-item-" + box+"-" + index+" .item-id").val();
        if(index == undefined) item_id = box;

        manager.get("{~/adminv3/menu/edit/}" + item_id, { }, function (data) {
            if(editDialog != null) editDialog.Remove();

            editDialog = new Dialog();
            editDialog.setTitle(data.title);
            editDialog.setButtons([Dialog.CLOSE, Dialog.SAVE]);
            editDialog.dialogHtml.html("<div class=cnt>" + data.content + "</div>");
            editDialog.Show();
            butt = editDialog.getButtons();
            $(butt[1]).click(function () { 
                btnLoading($(butt[1]), true);
                manager.submitForm("#submit-edit-menu-form-button", function(){
                    editDialog.Close();
                    menuManager.reloadMenus();
                    manager.notification("{t('Saved')}", "success");
                }) 
            });
            $(butt[0]).click(function () { editDialog.Close(); });
            afterPageLoad();
        });       
    };
    MenuManager.prototype.refreshIfEmpty = function(){
        this.boxes.each(function(){
            if($(this).find(".sort-list-item").length == 0) {
                menuManager.reloadMenus();
            }
        });
    };
    var editDialog = null;
    var menuManager = new MenuManager();
</script>